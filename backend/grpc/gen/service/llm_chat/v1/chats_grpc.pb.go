// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: chats.proto

package llm_chat_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	LLMChatService_ProcessText_FullMethodName = "/llm_chat_v1.LLMChatService/ProcessText"
)

// LLMChatServiceClient is the client API for LLMChatService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LLMChatServiceClient interface {
	ProcessText(ctx context.Context, in *StartSessionRequest, opts ...grpc.CallOption) (*StartSessionResponse, error)
}

type lLMChatServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLLMChatServiceClient(cc grpc.ClientConnInterface) LLMChatServiceClient {
	return &lLMChatServiceClient{cc}
}

func (c *lLMChatServiceClient) ProcessText(ctx context.Context, in *StartSessionRequest, opts ...grpc.CallOption) (*StartSessionResponse, error) {
	out := new(StartSessionResponse)
	err := c.cc.Invoke(ctx, LLMChatService_ProcessText_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LLMChatServiceServer is the server API for LLMChatService service.
// All implementations must embed UnimplementedLLMChatServiceServer
// for forward compatibility
type LLMChatServiceServer interface {
	ProcessText(context.Context, *StartSessionRequest) (*StartSessionResponse, error)
	mustEmbedUnimplementedLLMChatServiceServer()
}

// UnimplementedLLMChatServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLLMChatServiceServer struct {
}

func (UnimplementedLLMChatServiceServer) ProcessText(context.Context, *StartSessionRequest) (*StartSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessText not implemented")
}
func (UnimplementedLLMChatServiceServer) mustEmbedUnimplementedLLMChatServiceServer() {}

// UnsafeLLMChatServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LLMChatServiceServer will
// result in compilation errors.
type UnsafeLLMChatServiceServer interface {
	mustEmbedUnimplementedLLMChatServiceServer()
}

func RegisterLLMChatServiceServer(s grpc.ServiceRegistrar, srv LLMChatServiceServer) {
	s.RegisterService(&LLMChatService_ServiceDesc, srv)
}

func _LLMChatService_ProcessText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LLMChatServiceServer).ProcessText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LLMChatService_ProcessText_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LLMChatServiceServer).ProcessText(ctx, req.(*StartSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LLMChatService_ServiceDesc is the grpc.ServiceDesc for LLMChatService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LLMChatService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "llm_chat_v1.LLMChatService",
	HandlerType: (*LLMChatServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProcessText",
			Handler:    _LLMChatService_ProcessText_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chats.proto",
}
